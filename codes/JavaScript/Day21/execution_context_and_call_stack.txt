JavaScript Execution context

1 : {} - Global Execution context
2 : Function Execution context
3 : Eval execution context

JavaScript code execution - 
1 : Memmory creation Phase
2 : Execution Phase

// program
const val1 = 10
const val2  = 5

function addNum(num1, num2){
    let total = num1 + num2
    return total
}

let result1 = addNum(val1, val2)
let result2 = addNum(10,5)

// program execution

1 : global execution context
2 : memory phase ->
                    val1 = undefined
                    val2 = undefined
                    addNum = definition
                    result1 = undefined
                    result2 = undefined
3 : execution phase -> 
                    val1 = 10
                    val2 = 5
                    // addNum - a new sandbox is created here for new function 
                    a new execution context has - new enviroment variables and execution thread for the definition now to be executed
                    1: Memmory phase ->
                                        val1 = undefined
                                        val2 = undefined
                                        total = undefined
                    2 :execution phase ->
                                        num1 = 10
                                        num2 = 5
                                        total = 15
                    total return back to global execution context
                    // addNum(10,5) -
                    1: Memmory phase ->
                                        val1 = undefined
                                        val2 = undefined
                                        total = undefined
                    2 :execution phase ->
                                        num1 = 10
                                        num2 = 5
                                        total = 15
                    total return back to global execution context

call stack -> 1 : global execution
            // then function load and process and executes 
            // by lifo - last in first out 
